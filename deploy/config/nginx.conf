user  nobody nogroup;
worker_processes 1;
error_log  /dev/stderr info;
pid        /var/run/nginx.pid;

events {
    worker_connections  4096;
    multi_accept        on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$host" sn="$server_name" '
                      'rt=$request_time '
                      'ua="$upstream_addr" us="$upstream_status" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'cs=$upstream_cache_status' ;

    access_log  /dev/stdout main_ext;
    sendfile        on;
    resolver    8.8.8.8;

    proxy_cache_path /tmp/nginx-cache levels=1:2 keys_zone=static:64m max_size=512m use_temp_path=off;

    upstream redexor_web {
        server 127.0.0.1:4000 max_fails=5 fail_timeout=60s;
    }

    upstream redexor_api {
        server 127.0.0.1:4040 max_fails=5 fail_timeout=60s;
    }

    server {
        # Hardcode host header
        set $origin_host_header redexor.com;

        # Pass host header through
        #set $origin_host_header $http_host;

        listen              8080;
        server_name         redexor.com;

        port_in_redirect        off;
        proxy_http_version      1.1;
        proxy_buffering         on;

        location /healthz {
            return 200 "ok";
        }

        location / {
            proxy_pass http://redexor_web;
            #proxy_ssl_protocols TLSv1.2;
            #proxy_ssl_server_name on;
            expires off;

            proxy_set_header        Host                    $origin_host_header;
            proxy_set_header        X-Forwarded-Host        $http_host;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Cluster-Client-Ip $remote_addr;
            # The Important Websocket Bits!
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection "upgrade";

            proxy_ignore_headers    Vary;
            add_header              X-Fly-Region            $http_fly_region;
            add_header              X-Fly-Cache             $upstream_cache_status;
            proxy_cache             static;

            proxy_cache_use_stale   updating error timeout http_429 http_500 http_502 http_503 http_504;
            proxy_cache_revalidate  on;
            proxy_cache_background_update on;
            proxy_cache_lock        on;
            proxy_connect_timeout   2000ms;
            proxy_read_timeout      60000ms;
            proxy_send_timeout      60000ms;
            proxy_cache_key         $scheme://$http_host/$request_uri;
        }
    }

    server {
        # Pass host header through
        #set $origin_host_header $http_host;

        listen              8080;
        server_name         *.api.redexor.com;

        port_in_redirect        off;
        proxy_http_version      1.1;
        proxy_buffering         on;

        location /healthz {
            return 200 "ok";
        }

        location / {
            proxy_pass http://redexor_api;
            #proxy_ssl_protocols TLSv1.2;
            #proxy_ssl_server_name on;
            expires off;

            proxy_set_header        Host                    $http_host;
            proxy_set_header        X-Forwarded-Host        $http_host;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Cluster-Client-Ip $remote_addr;
            # The Important Websocket Bits!
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection "upgrade";

            proxy_ignore_headers    Vary;
            add_header              X-Fly-Region            $http_fly_region;
            add_header              X-Fly-Cache             $upstream_cache_status;
            proxy_cache             static;

            proxy_cache_use_stale   updating error timeout http_429 http_500 http_502 http_503 http_504;
            proxy_cache_revalidate  on;
            proxy_cache_background_update on;
            proxy_cache_lock        on;
            proxy_connect_timeout   2000ms;
            proxy_read_timeout      60000ms;
            proxy_send_timeout      60000ms;
            proxy_cache_key         $scheme://$http_host/$request_uri;
        }
    }

    # health check server
    server {
        listen 8080;
        server_name health.check;

        location /healthz {
            access_log /dev/stdout;
            return 200 "ok";
        }
    }

    server {
        listen 8080 default_server;
        server_name _;
        access_log off;
        return 404;
    }
}